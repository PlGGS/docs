[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/index.js",
    "content": "/**\n * @ignore\n */\nconst qEditSymb = 2001;\n/**\n * @ignore\n */\nconst qEditDate = 2002;\n/**\n * @ignore\n */\nconst littleEndian = true;\n\n/**\n * An {@link Object} that only contains member variables with corresponding {@link number}(s)\n * @typedef {Object} enumeration\n */\n\n/**\n * Class used for referencing all v9 event enumerations and data\n */\nexport class v9 {\n    constructor() {\n        /**\n         * Value used specify a non-existent 32 bit price returned\n         * @private\n         */\n        this.PRICE_NULL_32 = 2147483647;\n\n        /**\n         * Value used specify a non-existent 64 bit price returned\n         * @private\n         */\n        this.PRICE_NULL_64 = 9223372036854775807;\n\n        /**\n         * @ignore\n         * @private\n         */\n        this.sGroupSettleID = 4294967293;\n        \n        /**\n         * @typedef {enumeration} UnionID\n         * @property {number} NotSet 255\n         * @property {number} NotMapped 250\n         * @property {number} TradeSummary 0 : Message that contains summary information about trades\n         * @property {number} TradeMatch 1 : Message that contains information on a match of a trade event\n         * @property {number} VolumeUpdate 2 : Message that updates volume data after a TradeSummary event. On certain exchanges if two implied quotes are matched, a VolumeUpdate event will occur showing the change in the total volume, but it will not be tied to a TradeSummary event\n         * @property {number} BookLevel 3 : Message that contains information on a quote that occurred in the first n levels of the book. The instrument definition from the exchange specifies the exact number of levels. This message can show up alongside an OD message\n         * @property {number} OrderBook 4 : Message that contains information on a quote for all price levels\n         * @property {number} SecurityStatus 5 : Message that provides the security group market state change\n         * @property {number} DailyStatistics 6 : Message that provides information about a complete session\n         * @property {number} SessionStatistics 7 : Message that provides information about the session during the session\n         * @property {number} LimitsBanding 8 : Message that provides the daily limits for the current session\n         * @property {number} ChannelReset 9 : Message that indicates if the channel the contract is on was reset and at what time\n         * @property {number} TransactionMarker 10 : The TS message marks the start of a bundle, and the TE message marks the end of that bundle. The exchange considers all the messages between the start and end marker to have been processed together, regardless of how the packets were split during exchange transmission\n         */        \n        /**\n         * A {@link v9}․{@link Aggressor} {@link enumeration} that contains each of the different values that may be returned from:</br>\n         *  - v9.UnionID\n         * @type {enumeration}\n         * @example\n          * onEvent(pSymbol, pEvent, pRealTime) {\n          *     switch (pEvent.header.unionID) {\n          *         case v9.UnionID.<{@link UnionID}>:\n          *             // Do something when pEvent.header.unionID is equal to v9.UnionID.TradeSummary\n          *             break;\n          *         default :\n          *             break;\n          *     }\n          * }\n         */\n        this.UnionID =\n        {\n            NotSet: 255,\n            NotMapped: 250,\n            TradeSummary: 0,\n            TradeMatch: 1,\n            VolumeUpdate: 2,\n            BookLevel: 3,\n            OrderBook: 4,\n            SecurityStatus: 5,\n            DailyStatistics: 6,\n            SessionStatistics: 7,\n            LimitsBanding: 8,\n            ChannelReset: 9,\n            TransactionMarker: 10,\n            Test: 11, //Deprecated\n            ClearingPrice: 12 // FUTURE\n        };\n\n        /**\n         * @typedef {enumeration} Aggressor\n         * @property {number} NoAggressor 0\n         * @property {number} Buy 1\n         * @property {number} Sell 2\n         */\n        /**\n         * A {@link v9}․{@link Aggressor} {@link enumeration} that contains each of the different values that may be returned from:</br>\n         *  - pEvent.tradeSummary.aggressor\n         * @type {Aggressor}\n         * @example\n          * onEvent(pSymbol, pEvent, pRealTime) {\n          *     switch (pEvent.header.unionID) {\n          *    case v9.UnionID.TradeSummary:\n          *                  var agr = pEvent.tradeSummary.aggressor;\n          *              break;\n          *          default :\n          *              break;\n          *     }\n          * }\n          *\n         */\n        this.Aggressor =\n        { \n            NoAggressor: 0, \n            Buy: 1, \n            Sell: 2 \n        };\n\n        /**\n         * @typedef {enumeration} HaltReason\n         * @property {number} NotSet 255\n         * @property {number} GroupSchedule 0\n         * @property {number} SurveillanceIntervention 1\n         * @property {number} MarketEvent 2\n         * @property {number} InstrumentActivation 3\n         * @property {number} InstrumentExpiration 4\n         * @property {number} Unknown 5\n         * @property {number} RecoveryInProcess 6\n         */\n        /**\n         * A {@link v9}․{@link HaltReason} {@link enumeration} that contains each of the different values that may be returned from:</br>\n         *  - pEvent.securityStatus.haltReason\n         * @type {HaltReason}\n         * @example\n         * onEvent(pSymbol, pEvent, pRealTime) {\n         *     switch (pEvent.header.unionID) {\n         *         case v9.UnionID.SecurityStatus:\n         *             var hlt = pEvent.securityStatus.haltReason;\n         *             break;\n         *         default :\n         *             break;\n         *     }\n         * }\n         */\n        this.HaltReason =\n        {\n            NotSet: 255,\n            GroupSchedule: 0,\n            SurveillanceIntervention: 1,\n            MarketEvent: 2,\n            InstrumentActivation: 3,\n            InstrumentExpiration: 4,\n            Unknown: 5,\n            RecoveryInProcess: 6\n        };\n\n        /**\n         * @typedef {enumeration} SecurityType\n         * @property {number} NotSet 0\n         * @property {number} TradingHalt 2\n         * @property {number} Close 4\n         * @property {number} NewPriceIndication 15\n         * @property {number} ReadyToTrade 17\n         * @property {number} NotAvailableForTrading 18\n         * @property {number} UnknownorInvalid 20\n         * @property {number} PreOpen 21\n         * @property {number} PreCross 24\n         * @property {number} PostClose 26\n         * @property {number} NoChange 103\n         * @property {number} PreClose 150 : Only ICE Exchange\n         * @property {number} Restricted 200 : Only EUREX Exchange\n         * @property {number} Freeze 201 : Only EUREX Exchange\n         */\n        /**\n         * A {@link v9}․{@link SecurityType} {@link enumeration} that contains each of the different values that may be returned from:</br>\n         *  - pEvent.securityStatus.type\n         * @type {SecurityType}\n         * @example\n         * onEvent(pSymbol, pEvent, pRealTime) {\n         *     switch (pEvent.header.unionID) {\n         *         case v9.UnionID.SecurityStatus:\n         *             var typ = pEvent.securityStatus.type;\n         *             break;\n         *         default :\n         *             break;\n         *     }\n         * }\n         */\n        this.SecurityType =\n        {\n            NotSet: 0,\n            TradingHalt: 2,\n            Close: 4,\n            NewPriceIndication: 15,\n            ReadyToTrade: 17,\n            NotAvailableForTrading: 18,\n            UnknownorInvalid: 20,\n            PreOpen: 21,\n            PreCross: 24,\n            Cross: 25,\n            PostClose: 26,\n            NoChange: 103,\n            PreClose: 150,\n            Restricted: 200,\n            Freeze: 201\n        };\n\n        /*\n        this.SecurityEvent =\n        {\n            NoEvent: 0,\n            NoCancel: 1,\n            ResetStatistics: 4,\n            ImpliedMatchingON: 5,\n            ImpliedMatchingOFF: 6\n        };\n\n        this.BookType =\n        {\n            NotSet: 85,\n            Bid: 66,\n            Ask: 83,\n            ImpliedBid: 98,\n            ImpliedAsk: 115,\n            BookReset: 82\n        };\n\n        this.DailyStatisticsType =\n        {\n            SettlementPrice: 54,\n            ClearedVolume: 66,\n            OpenInterest: 67,\n            FixingPrice: 87\n        };\n\n        this.BookAction =\n        {\n            NotSet: 255,\n            New: 0,\n            Change: 1,\n            Delete: 2,\n            DeleteThru: 3,\n            DeleteFrom: 4,\n            Overlay: 5,\n            Replace: 6\n        };\n\n        this.SessionStatisticsType =\n        {\n            NotSet: 127,\n            OpenPrice: 0,\n            HighTrade: 1,\n            LowTrade: 2,\n            LastTrade: 3,\n            HighestBid: 4,\n            LowestAsk: 5,\n            ClosePrice: 6\n        };\n\n\n        this.StateType =\n        {\n            NotSet: 255,\n            DailyOpenPrice: 0,\n            IndicativeOpeningPrice: 5,\n            DailyClosePrice: 10\n        };\n\n        this.PutOrCall =\n        {\n            NotSet: 255,\n            Put: 0,\n            Call: 1\n        };\n\n        this.SettleType =\n        {\n            Final: 1,\n            Actual: 2,\n            Rounded: 4,\n            Intraday: 8,\n            ReservedBits: 16,\n            NullValue: 128\n        };\n\n        this.TransactionType =\n        {\n            NotSet: 255,\n            TransactionStart: 0,\n            TransactionEnd: 1\n        };\n\n        this.EventIndicator =\n        {\n            NotSet: 0,\n            LastOfType: 1,\n            EndOfEvent: 128\n        };\n        */\n    }\n};\n\nv9.edit = class {\n    constructor() {\n    }\n\n    set symbol(pSymb) {\n        return gHome._pagesave(gUniq, qEditSymb, pSymb);\n    }\n\n    get symbol() {\n        return gHome._pageread(gUniq, qEditSymb);\n    }\n}\n\nv9.lineChart = class {\n    constructor(pID) {\n        this.fLineEnum = gHome.MakeLine(gUniq, (pID) ? document.getElementById(pID) : null);\n    }\n\n    linePush(pItem, pRate, pTime) {\n        gHome.LinePush(gUniq, pItem.fCalcEnum, pRate, pTime);\n    }\n}\n\nv9.cubeChart = class {\n    constructor(pID) {\n        this.fCubeEnum = gHome.MakeCube(gUniq, (pID) ? document.getElementById(pID) : null);\n    }\n\n    cubePlus(pItem, pData, pSize) {\n        gHome.CubePlus(gUniq, pItem, pData, pSize);\n    }\n\n    cubeDele(pItem, pData) {\n        gHome.CubeDele(gUniq, pItem, pData);\n    }\n\n    cubeSave(pItem, pData, pSize) {\n        gHome.CubeSave(gUniq, pItem, pData, pSize);\n    }\n\n    cubeRead(pItem, pData) {\n        gHome.CubeRead(gUniq, pItem, pData);\n    }\n\n    cubeFree(pItem) {\n        gHome.CubeFree(gUniq, pItem);\n    }\n\n    cubePush(pItem, pSave) {\n        gHome.CubePush(gUniq, pItem, pSave);\n    }\n\n}\n\nv9.lineItem = class {\n    constructor(pPane) {\n        try {\n            this.fCalcEnum = gHome.MakeCalc(gUniq, this);\n        }\n        catch (e) {\n            gHome.PageErro(gUniq, \"MakeCalc\", e);\n        }\n    }\n\n    /**\n     * Stroke width in pixels\n     * @type {Number}\n     * @public\n     */\n    set lineWidth(pData) {\n        try {\n            this._lineWidth = pData;\n            gHome.Calc_lineWidth(gUniq, this.fCalcEnum, pData);\n        }\n        catch (e) {\n            gHome.PageErro(gUniq, \"lineWidth\", e);\n        }\n    }\n\n    /**\n     * Stroke color in hexadecimal as a String\n     * @type {String}\n     * @public\n     */\n    set strokeStyle(pData) {\n        try {\n            this._strokeStyle = pData;\n            gHome.Calc_strokeStyle(gUniq, this.fCalcEnum, pData);\n        }\n        catch (e) {\n            gHome.PageErroo(gUniq, \"strokeStyle\", e);\n        }\n    }\n\n    /**\n     * @todo figure out what this does\n     * @type {String}\n     * @public\n     */\n    set format(pData) {\n        try {\n            this._format = pData;\n            gHome.Calc_format(gUniq, this.fCalcEnum, pData);\n        }\n        catch (e) {\n            gHome.PageErro(gUniq, \"format\", e);\n        }\n    }\n\n    /**\n     * Text color in hexadecimal as a String\n     * @type {String}\n     * @public\n     */\n    set textStyle(pData) {\n        try {\n            this._textStyle = pData;\n            gHome.Calc_textStyle(gUniq, this.fCalcEnum, pData);\n        }\n        catch (e) {\n            gHome.PageErro(gUniq, \"textStyle\", e);\n        }\n    }\n\n    /**\n     * @todo figure out what this does\n     * @type {String}\n     * @public\n     */\n    set bodyStyle(pData) {\n        try {\n            this._bodyStyle = pData;\n            gHome.Calc_bodyStyle(gUniq, this.fCalcEnum, pData);\n        }\n        catch (e) {\n            gHome.PageErro(gUniq, \"textStyle\", e);\n        }\n    }\n\n    /**\n     * Text corresponding to current line price\n     * @type {String}\n     * @public\n     */\n    set title(pData) {\n        try {\n            this._title = pData;\n            gHome.Calc_title(gUniq, this.fCalcEnum, pData);\n        }\n        catch (e) {\n            gHome.PageErro(gUniq, \"title\", e);\n        }\n    }\n\n    /**\n     * @todo figure out what this does\n     * @type {String}\n     * @public\n     */\n    set name(pData) {\n        try {\n            this._name = pData;\n            gHome.Calc_name(gUniq, this.fCalcEnum, pData);\n        }\n        catch (e) {\n            gHome.PageErro(gUniq, \"name\", e);\n        }\n    }\n\n    /**\n     * Stroke width in pixels\n     * @type {Number}\n     * @public\n     */\n    get lineWidth() {\n        return this._lineWidth;\n    }\n\n    /**\n     * Stroke color in hexadecimal as a String\n     * @type {String}\n     * @public\n     */\n    get strokeStyle() {\n        return this._strokeStyle;\n    }\n\n    /**\n     * Text color in hexadecimal as a String\n     * @type {String}\n     * @public\n     */\n    get textStyle() {\n        return this._textStyle;\n    }\n\n    /**\n     * @todo figure out what this does\n     * @type {String}\n     * @readonly\n     */\n    get eventStyle() {\n        return this._eventStyle;\n    }\n\n    /**\n     * Text corresponding to current line price\n     * @type {String}\n     * @public\n     */\n    get title() {\n        return this._title;\n    }\n\n    /**\n     * @todo figure out what this does\n     * @type {String}\n     * @public\n     */\n    get format() {\n        return this._format;\n    }\n}\n\nv9.cubeItem = class {\n    constructor(pPane) {\n        try {\n            this.fCalcEnum = gHome.MakeCalc(gUniq, this);\n            this.fCubeMaps = new Map();\n        }\n        catch (e) {\n            gHome.PageErro(gUniq, \"MakeCalc\", e);\n        }\n    }\n\n    /**\n     * Stroke width in pixels\n     * @type {Number}\n     * @public\n     */\n    set lineWidth(pData) {\n        try {\n            this._lineWidth = pData;\n            gHome.Calc_lineWidth(gUniq, this.fCalcEnum, pData);\n        }\n        catch (e) {\n            gHome.PageErro(gUniq, \"lineWidth\", e);\n        }\n    }\n\n    /**\n     * Stroke color in hexadecimal as a String\n     * @type {String}\n     * @public\n     */\n    set strokeStyle(pData) {\n        try {\n            this._strokeStyle = pData;\n            gHome.Calc_strokeStyle(gUniq, this.fCalcEnum, pData);\n        }\n        catch (e) {\n            gHome.PageErroo(gUniq, \"strokeStyle\", e);\n        }\n    }\n\n    /**\n     * @todo figure out what this does\n     * @type {String}\n     * @readonly\n     */\n    set format(pData) {\n        try {\n            this._format = pData;\n            gHome.Calc_format(gUniq, this.fCalcEnum, pData);\n        }\n        catch (e) {\n            gHome.PageErro(gUniq, \"format\", e);\n        }\n    }\n\n    /**\n     * Text color in hexadecimal as a String\n     * @type {String}\n     * @public\n     */\n    set textStyle(pData) {\n        try {\n            this._textStyle = pData;\n            gHome.Calc_textStyle(gUniq, this.fCalcEnum, pData);\n        }\n        catch (e) {\n            gHome.PageErro(gUniq, \"textStyle\", e);\n        }\n    }\n\n    /**\n     * @todo figure out what this does\n     * @type {String}\n     * @public\n     */\n    set bodyStyle(pData) {\n        try {\n            this._bodyStyle = pData;\n            gHome.Calc_bodyStyle(gUniq, this.fCalcEnum, pData);\n        }\n        catch (e) {\n            gHome.PageErro(gUniq, \"textStyle\", e);\n        }\n    }\n\n    /**\n     * Text corresponding to current cube price\n     * @type {String}\n     * @public\n     */\n    set title(pData) {\n        try {\n            this._title = pData;\n            gHome.Calc_title(gUniq, this.fCalcEnum, pData);\n        }\n        catch (e) {\n            gHome.PageErro(gUniq, \"title\", e);\n        }\n    }\n\n    /**\n     * @todo figure out what this does\n     * @type {String}\n     * @public\n     */\n    set name(pData) {\n        try {\n            this._name = pData;\n            gHome.Calc_name(gUniq, this.fCalcEnum, pData);\n        }\n        catch (e) {\n            gHome.PageErro(gUniq, \"name\", e);\n        }\n    }\n\n    /**\n     * Stroke width in pixels\n     * @type {Number}\n     * @public\n     */\n    get lineWidth() {\n        return this._lineWidth;\n    }\n\n    /**\n     * Stroke color in hexadecimal as a String\n     * @type {String}\n     * @public\n     */\n    get strokeStyle() {\n        return this._strokeStyle;\n    }\n\n    /**\n     * Text color in hexadecimal as a String\n     * @type {String}\n     * @public\n     */\n    get textStyle() {\n        return this._textStyle;\n    }\n\n    /**\n     * @todo figure out what this does\n     * @type {String}\n     * @readonly \n     */\n    get eventStyle() {\n        return this._eventStyle;\n    }\n\n    /**\n     * Text corresponding to current cube price\n     * @type {String}\n     * @public\n     */\n    get title() {\n        return this._title;\n    }\n\n    /**\n     * @todo figure out what this does\n     * @type {String}\n     * @public\n     */\n    get format() {\n        return this._format;\n    }\n}\n\n/**\n * Returns a JSON object representing the provided event\n * @param {Event} pEvent\n */\nv9.eventToJson = function (pEvent) {\n    let tEvent = v9.eventCopy(pEvent);\n\n    if (tEvent !== undefined) {\n        let intCount = 0, repCount = 0;\n        const json = JSON.stringify(tEvent, (_, v) => {\n            if (typeof v === 'bigint') {\n                intCount++;\n                return `${v}#bigint`;\n            }\n            return v;\n        });\n        const res = json.replace(/\"(-?\\d+)#bigint\"/g, (_, a) => {\n            repCount++;\n            return a;\n        });\n        if (repCount > intCount) {\n            // You have a string somewhere that looks like \"123#bigint\";\n            throw new Error(`BigInt serialization pattern conflict with a string value.`);\n        }\n        return res;\n    }\n}\n\n/**\n * Returns a copy of a provided event\n * @param {Event} pEvent\n */\nv9.eventCopy = function (pEvent) {\n\n    let tEvent = {};\n\n    if (pEvent.header) {\n        tEvent.header = {};\n        tEvent.header = Object.assign(pEvent.header);\n    }\n\n    try {\n        switch (pEvent.header.unionID) {\n            case v9.UnionID.TransactionMarker:\n                tEvent.transactionMarker = {};\n                tEvent.transactionMarker = Object.assign(pEvent.transactionMarker);\n                break;\n            case v9.UnionID.ChannelReset:\n                tEvent.channelReset = {};\n                tEvent.channelReset = Object.assign(pEvent.channelReset);\n                break;\n            case v9.UnionID.TradeSummary:\n                tEvent.tradeSummary = {};\n                tEvent.tradeSummary = Object.assign(pEvent.tradeSummary);\n                break;\n            case v9.UnionID.TradeMatch:\n                tEvent.tradeMatch = {};\n                tEvent.tradeMatch = Object.assign(pEvent.tradeMatch);\n                break;\n            case v9.UnionID.VolumeUpdate:\n                tEvent.volumeUpdate = {};\n                tEvent.volumeUpdate = Object.assign(pEvent.volumeUpdate);\n                break;\n            case v9.UnionID.BookLevel:\n                tEvent.bookLevel = {};\n                tEvent.bookLevel = Object.assign(pEvent.bookLevel);\n                break;\n            case v9.UnionID.OrderBook:\n                tEvent.orderBook = {};\n                tEvent.orderBook = Object.assign(pEvent.orderBook);\n                break;\n            case v9.UnionID.SecurityStatus:\n                tEvent.securityStatus = {};\n                tEvent.securityStatus = Object.assign(pEvent.securityStatus);\n                break;\n            case v9.UnionID.DailyStatistics:\n                tEvent.dailyStatistics = {};\n                tEvent.dailyStatistics = Object.assign(pEvent.dailyStatistics);\n                break;\n            case v9.UnionID.SessionStatistics:\n                tEvent.sessionStatistics = {};\n                tEvent.sessionStatistics = Object.assign(pEvent.sessionStatistics);\n                break;\n            case v9.UnionID.LimitsBanding:\n                tEvent.limitsBanding = {};\n                tEvent.limitsBanding = Object.assign(pEvent.limitsBanding);\n                break;\n            case v9.UnionID.ClearingPrice:\n                tEvent.clearingPrice = {};\n                tEvent.clearingPrice = Object.assign(pEvent.clearingPrice);\n                break;\n        }\n    }\n    catch (e) {\n    }\n\n    return tEvent;\n}\n\n/**\n * This class' functions should be overridden in each script for handling user actions and symbol events\n * @example\n * class MyFeed extends v9.feed\t{\n *\t\tonOpen ()\n *\t\t{\n *\t\t}\n *\n *\t\tonLoad ()\n *\t\t{\n *\t\t}\n *\n *\t\tonStop ()\n *\t\t{\n *\t\t}\n *\n *\t\tonRender ()\n *\t\t{\n *\t\t}\n *\n *\t\tonEvent (pSymbol,pEvent,pRealTime)\n *\t\t{\n *\t\t}\n * }\n *\n * let feed = new MyFeed(new v9.edit().symbol);\n */\nv9.feed = class {\n    /**\n     * \n     * @param {String} pSymbol\n     */\n    constructor(pSymbol) {\n        gHome.MakeFeed(gUniq, pSymbol);\n        gFeed = this;\n    }\n\n    /**\n     * Built in feed function that is called when the start button is pressed in order to initialize variables.\n     * @param {Object} pMeta - Object representing json meta information. It currently provides the instrument definitions of the supplied symbol.\n     * @abstract\n     * @example\n     * onOpen(pMeta) {\n     *\n     * }\n     */\n    onOpen(pMeta) {\n\n    }\n\n    /**\n     * Built in feed function that is called once the script has read every previous event in the symbol Feed.\n     * @abstract\n     * @example\n     * onLoad() {\n     *\n     * }\n     */\n    onLoad() {\n    }\n\n    /**\n     * The built in onEvent function is called once for each timestamp tracked in your symbol.\n     *\n     * This is where you'll be doing most of your calculations on the specific things you're looking for in your symbol. It allows your script to perform different tasks depending on the current event's conditions.\n     * @param {String} pSymbol - Name of the current symbol\n     * @param {Object} pEvent - Current event being handled\n     * @param {Boolean} pRealTime - Boolean determining whether or not to only handle current events\n     * @abstract\n     * @example\n     * onEvent(pSymbol, pEvent, pRealTime) {\n     *\n     * }\n     */\n    onEvent(pSymbol, pEvent, pRealTime) {\n    }\n\n    /**\n     * Built in feed function that is called once for each frame that is rendered to the viewport.\n     * @abstract\n     * @example\n     * onRender() {\n     *\n     * }\n     */\n    onRender() {\n    }\n\n    /**\n     * Built in feed function that is called when the stop button is pressed.\n     * @abstract\n     * @example\n     * onStop() {\n     *\n     * }\n     */\n    onStop() {\n    }\n}\n\n/**\n * Reports errors to the debugging window\n * @param {String} msg\n * @param {String} url\n * @param {Number} lineNo\n * @param {Number} columnNo\n * @param {any} error\n */\nwindow.onerror = function (msg, url, lineNo, columnNo, error) {\n    var string = msg.toLowerCase();\n    var substring = \"script error\";\n    if (string.indexOf(substring) > -1) {\n        gHome._pageerro(gUniq, 'Script Error: See Browser Console for Detail');\n    }\n    else {\n        //var message = [\n        //\t'Message: ' + msg,\n        //\t'URL: ' + url,\n        //\t'Line: ' + lineNo,\n        //\t'Column: ' + columnNo,\n        //\t'Error object: ' + JSON.stringify(error)\n        //].join(' - ');\n\n        var message = [\n            'Message: ' + msg,\n            'Line: ' + lineNo,\n            'Column: ' + columnNo\n        ].join(' - ');\n\n        gHome._pageerro(gUniq, message);\n    }\n}\n\nwindow.onfocus = function () {\n    gHome._pagesele(gUniq);\n};\n",
    "static": true,
    "longname": "/mnt/c/Users/Blake Reset/source/repos/PlGGS/docs/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "qEditSymb",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~qEditSymb",
    "access": "public",
    "export": false,
    "importPath": "evntscript/src/index.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 4,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "qEditDate",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~qEditDate",
    "access": "public",
    "export": false,
    "importPath": "evntscript/src/index.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "littleEndian",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~littleEndian",
    "access": "public",
    "export": false,
    "importPath": "evntscript/src/index.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "typedef",
    "name": "enumeration",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~enumeration",
    "access": "public",
    "description": "An {@link Object} that only contains member variables with corresponding {@link number}(s)",
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "enumeration"
    }
  },
  {
    "__docId__": 53,
    "kind": "class",
    "name": "v9",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~v9",
    "access": "public",
    "export": true,
    "importPath": "evntscript/src/index.js",
    "importStyle": "{v9}",
    "description": "Class used for referencing all v9 event enumerations and data",
    "lineNumber": 22,
    "interface": false
  },
  {
    "__docId__": 54,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/index.js~v9",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~v9#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "PRICE_NULL_32",
    "memberof": "src/index.js~v9",
    "static": false,
    "longname": "src/index.js~v9#PRICE_NULL_32",
    "access": "private",
    "description": "Value used specify a non-existent 32 bit price returned",
    "lineNumber": 28,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "PRICE_NULL_64",
    "memberof": "src/index.js~v9",
    "static": false,
    "longname": "src/index.js~v9#PRICE_NULL_64",
    "access": "private",
    "description": "Value used specify a non-existent 64 bit price returned",
    "lineNumber": 34,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "sGroupSettleID",
    "memberof": "src/index.js~v9",
    "static": false,
    "longname": "src/index.js~v9#sGroupSettleID",
    "access": "private",
    "description": "",
    "lineNumber": 40,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "typedef",
    "name": "UnionID",
    "memberof": "src/index.js~v9",
    "static": true,
    "longname": "src/index.js~v9.UnionID",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "NotSet",
        "description": "255"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "NotMapped",
        "description": "250"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "TradeSummary",
        "description": "0 : Message that contains summary information about trades"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "TradeMatch",
        "description": "1 : Message that contains information on a match of a trade event"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "VolumeUpdate",
        "description": "2 : Message that updates volume data after a TradeSummary event. On certain exchanges if two implied quotes are matched, a VolumeUpdate event will occur showing the change in the total volume, but it will not be tied to a TradeSummary event"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "BookLevel",
        "description": "3 : Message that contains information on a quote that occurred in the first n levels of the book. The instrument definition from the exchange specifies the exact number of levels. This message can show up alongside an OD message"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "OrderBook",
        "description": "4 : Message that contains information on a quote for all price levels"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "SecurityStatus",
        "description": "5 : Message that provides the security group market state change"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "DailyStatistics",
        "description": "6 : Message that provides information about a complete session"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "SessionStatistics",
        "description": "7 : Message that provides information about the session during the session"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "LimitsBanding",
        "description": "8 : Message that provides the daily limits for the current session"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ChannelReset",
        "description": "9 : Message that indicates if the channel the contract is on was reset and at what time"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "TransactionMarker",
        "description": "10 : The TS message marks the start of a bundle, and the TE message marks the end of that bundle. The exchange considers all the messages between the start and end marker to have been processed together, regardless of how the packets were split during exchange transmission"
      }
    ],
    "type": {
      "types": [
        "enumeration"
      ],
      "optional": false,
      "name": "UnionID"
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "UnionID",
    "memberof": "src/index.js~v9",
    "static": false,
    "longname": "src/index.js~v9#UnionID",
    "access": "public",
    "description": "A {@link v9}․{@link Aggressor} {@link enumeration} that contains each of the different values that may be returned from:</br>\n - v9.UnionID",
    "examples": [
      "onEvent(pSymbol, pEvent, pRealTime) {\n    switch (pEvent.header.unionID) {\n        case v9.UnionID.<{@link UnionID}>:\n            // Do something when pEvent.header.unionID is equal to v9.UnionID.TradeSummary\n            break;\n        default :\n            break;\n    }\n}"
    ],
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "enumeration"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 60,
    "kind": "typedef",
    "name": "Aggressor",
    "memberof": "src/index.js~v9",
    "static": true,
    "longname": "src/index.js~v9.Aggressor",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "NoAggressor",
        "description": "0"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "Buy",
        "description": "1"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "Sell",
        "description": "2"
      }
    ],
    "type": {
      "types": [
        "enumeration"
      ],
      "optional": false,
      "name": "Aggressor"
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "Aggressor",
    "memberof": "src/index.js~v9",
    "static": false,
    "longname": "src/index.js~v9#Aggressor",
    "access": "public",
    "description": "A {@link v9}․{@link Aggressor} {@link enumeration} that contains each of the different values that may be returned from:</br>\n - pEvent.tradeSummary.aggressor",
    "examples": [
      "onEvent(pSymbol, pEvent, pRealTime) {\n    switch (pEvent.header.unionID) {\n   case v9.UnionID.TradeSummary:\n                 var agr = pEvent.tradeSummary.aggressor;\n             break;\n         default :\n             break;\n    }\n}"
    ],
    "lineNumber": 114,
    "type": {
      "nullable": null,
      "types": [
        "Aggressor"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 62,
    "kind": "typedef",
    "name": "HaltReason",
    "memberof": "src/index.js~v9",
    "static": true,
    "longname": "src/index.js~v9.HaltReason",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "NotSet",
        "description": "255"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "GroupSchedule",
        "description": "0"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "SurveillanceIntervention",
        "description": "1"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "MarketEvent",
        "description": "2"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "InstrumentActivation",
        "description": "3"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "InstrumentExpiration",
        "description": "4"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "Unknown",
        "description": "5"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "RecoveryInProcess",
        "description": "6"
      }
    ],
    "type": {
      "types": [
        "enumeration"
      ],
      "optional": false,
      "name": "HaltReason"
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "HaltReason",
    "memberof": "src/index.js~v9",
    "static": false,
    "longname": "src/index.js~v9#HaltReason",
    "access": "public",
    "description": "A {@link v9}․{@link HaltReason} {@link enumeration} that contains each of the different values that may be returned from:</br>\n - pEvent.securityStatus.haltReason",
    "examples": [
      "onEvent(pSymbol, pEvent, pRealTime) {\n    switch (pEvent.header.unionID) {\n        case v9.UnionID.SecurityStatus:\n            var hlt = pEvent.securityStatus.haltReason;\n            break;\n        default :\n            break;\n    }\n}"
    ],
    "lineNumber": 147,
    "type": {
      "nullable": null,
      "types": [
        "HaltReason"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 64,
    "kind": "typedef",
    "name": "SecurityType",
    "memberof": "src/index.js~v9",
    "static": true,
    "longname": "src/index.js~v9.SecurityType",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "NotSet",
        "description": "0"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "TradingHalt",
        "description": "2"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "Close",
        "description": "4"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "NewPriceIndication",
        "description": "15"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ReadyToTrade",
        "description": "17"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "NotAvailableForTrading",
        "description": "18"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "UnknownorInvalid",
        "description": "20"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "PreOpen",
        "description": "21"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "PreCross",
        "description": "24"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "PostClose",
        "description": "26"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "NoChange",
        "description": "103"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "PreClose",
        "description": "150 : Only ICE Exchange"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "Restricted",
        "description": "200 : Only EUREX Exchange"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "Freeze",
        "description": "201 : Only EUREX Exchange"
      }
    ],
    "type": {
      "types": [
        "enumeration"
      ],
      "optional": false,
      "name": "SecurityType"
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "SecurityType",
    "memberof": "src/index.js~v9",
    "static": false,
    "longname": "src/index.js~v9#SecurityType",
    "access": "public",
    "description": "A {@link v9}․{@link SecurityType} {@link enumeration} that contains each of the different values that may be returned from:</br>\n - pEvent.securityStatus.type",
    "examples": [
      "onEvent(pSymbol, pEvent, pRealTime) {\n    switch (pEvent.header.unionID) {\n        case v9.UnionID.SecurityStatus:\n            var typ = pEvent.securityStatus.type;\n            break;\n        default :\n            break;\n    }\n}"
    ],
    "lineNumber": 191,
    "type": {
      "nullable": null,
      "types": [
        "SecurityType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 66,
    "kind": "class",
    "name": "edit",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~edit",
    "access": "public",
    "export": false,
    "importPath": "evntscript/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 305,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 67,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/index.js~edit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~edit#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 306,
    "undocument": true
  },
  {
    "__docId__": 68,
    "kind": "set",
    "name": "symbol",
    "memberof": "src/index.js~edit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~edit#symbol",
    "access": "public",
    "description": null,
    "lineNumber": 309,
    "undocument": true
  },
  {
    "__docId__": 69,
    "kind": "get",
    "name": "symbol",
    "memberof": "src/index.js~edit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~edit#symbol",
    "access": "public",
    "description": null,
    "lineNumber": 313,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "class",
    "name": "lineChart",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~lineChart",
    "access": "public",
    "export": false,
    "importPath": "evntscript/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 318,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 71,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/index.js~lineChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~lineChart#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 319,
    "undocument": true
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "fLineEnum",
    "memberof": "src/index.js~lineChart",
    "static": false,
    "longname": "src/index.js~lineChart#fLineEnum",
    "access": "public",
    "description": null,
    "lineNumber": 320,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "linePush",
    "memberof": "src/index.js~lineChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~lineChart#linePush",
    "access": "public",
    "description": null,
    "lineNumber": 323,
    "undocument": true,
    "params": [
      {
        "name": "pItem",
        "types": [
          "*"
        ]
      },
      {
        "name": "pRate",
        "types": [
          "*"
        ]
      },
      {
        "name": "pTime",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 74,
    "kind": "class",
    "name": "cubeChart",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~cubeChart",
    "access": "public",
    "export": false,
    "importPath": "evntscript/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 328,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 75,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/index.js~cubeChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~cubeChart#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 329,
    "undocument": true
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "fCubeEnum",
    "memberof": "src/index.js~cubeChart",
    "static": false,
    "longname": "src/index.js~cubeChart#fCubeEnum",
    "access": "public",
    "description": null,
    "lineNumber": 330,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "cubePlus",
    "memberof": "src/index.js~cubeChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~cubeChart#cubePlus",
    "access": "public",
    "description": null,
    "lineNumber": 333,
    "undocument": true,
    "params": [
      {
        "name": "pItem",
        "types": [
          "*"
        ]
      },
      {
        "name": "pData",
        "types": [
          "*"
        ]
      },
      {
        "name": "pSize",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "cubeDele",
    "memberof": "src/index.js~cubeChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~cubeChart#cubeDele",
    "access": "public",
    "description": null,
    "lineNumber": 337,
    "undocument": true,
    "params": [
      {
        "name": "pItem",
        "types": [
          "*"
        ]
      },
      {
        "name": "pData",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "cubeSave",
    "memberof": "src/index.js~cubeChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~cubeChart#cubeSave",
    "access": "public",
    "description": null,
    "lineNumber": 341,
    "undocument": true,
    "params": [
      {
        "name": "pItem",
        "types": [
          "*"
        ]
      },
      {
        "name": "pData",
        "types": [
          "*"
        ]
      },
      {
        "name": "pSize",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "cubeRead",
    "memberof": "src/index.js~cubeChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~cubeChart#cubeRead",
    "access": "public",
    "description": null,
    "lineNumber": 345,
    "undocument": true,
    "params": [
      {
        "name": "pItem",
        "types": [
          "*"
        ]
      },
      {
        "name": "pData",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "cubeFree",
    "memberof": "src/index.js~cubeChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~cubeChart#cubeFree",
    "access": "public",
    "description": null,
    "lineNumber": 349,
    "undocument": true,
    "params": [
      {
        "name": "pItem",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "cubePush",
    "memberof": "src/index.js~cubeChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~cubeChart#cubePush",
    "access": "public",
    "description": null,
    "lineNumber": 353,
    "undocument": true,
    "params": [
      {
        "name": "pItem",
        "types": [
          "*"
        ]
      },
      {
        "name": "pSave",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 83,
    "kind": "class",
    "name": "lineItem",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~lineItem",
    "access": "public",
    "export": false,
    "importPath": "evntscript/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 359,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 84,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/index.js~lineItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~lineItem#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 360,
    "undocument": true
  },
  {
    "__docId__": 85,
    "kind": "member",
    "name": "fCalcEnum",
    "memberof": "src/index.js~lineItem",
    "static": false,
    "longname": "src/index.js~lineItem#fCalcEnum",
    "access": "public",
    "description": null,
    "lineNumber": 362,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "set",
    "name": "lineWidth",
    "memberof": "src/index.js~lineItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~lineItem#lineWidth",
    "access": "public",
    "description": "Stroke width in pixels",
    "lineNumber": 374,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 87,
    "kind": "member",
    "name": "_lineWidth",
    "memberof": "src/index.js~lineItem",
    "static": false,
    "longname": "src/index.js~lineItem#_lineWidth",
    "access": "private",
    "description": null,
    "lineNumber": 376,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "set",
    "name": "strokeStyle",
    "memberof": "src/index.js~lineItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~lineItem#strokeStyle",
    "access": "public",
    "description": "Stroke color in hexadecimal as a String",
    "lineNumber": 389,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 89,
    "kind": "member",
    "name": "_strokeStyle",
    "memberof": "src/index.js~lineItem",
    "static": false,
    "longname": "src/index.js~lineItem#_strokeStyle",
    "access": "private",
    "description": null,
    "lineNumber": 391,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "set",
    "name": "format",
    "memberof": "src/index.js~lineItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~lineItem#format",
    "access": "public",
    "description": "",
    "lineNumber": 404,
    "todo": [
      "figure out what this does"
    ],
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 91,
    "kind": "member",
    "name": "_format",
    "memberof": "src/index.js~lineItem",
    "static": false,
    "longname": "src/index.js~lineItem#_format",
    "access": "private",
    "description": null,
    "lineNumber": 406,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "set",
    "name": "textStyle",
    "memberof": "src/index.js~lineItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~lineItem#textStyle",
    "access": "public",
    "description": "Text color in hexadecimal as a String",
    "lineNumber": 419,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 93,
    "kind": "member",
    "name": "_textStyle",
    "memberof": "src/index.js~lineItem",
    "static": false,
    "longname": "src/index.js~lineItem#_textStyle",
    "access": "private",
    "description": null,
    "lineNumber": 421,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "set",
    "name": "bodyStyle",
    "memberof": "src/index.js~lineItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~lineItem#bodyStyle",
    "access": "public",
    "description": "",
    "lineNumber": 434,
    "todo": [
      "figure out what this does"
    ],
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 95,
    "kind": "member",
    "name": "_bodyStyle",
    "memberof": "src/index.js~lineItem",
    "static": false,
    "longname": "src/index.js~lineItem#_bodyStyle",
    "access": "private",
    "description": null,
    "lineNumber": 436,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "set",
    "name": "title",
    "memberof": "src/index.js~lineItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~lineItem#title",
    "access": "public",
    "description": "Text corresponding to current line price",
    "lineNumber": 449,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "_title",
    "memberof": "src/index.js~lineItem",
    "static": false,
    "longname": "src/index.js~lineItem#_title",
    "access": "private",
    "description": null,
    "lineNumber": 451,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "set",
    "name": "name",
    "memberof": "src/index.js~lineItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~lineItem#name",
    "access": "public",
    "description": "",
    "lineNumber": 464,
    "todo": [
      "figure out what this does"
    ],
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 99,
    "kind": "member",
    "name": "_name",
    "memberof": "src/index.js~lineItem",
    "static": false,
    "longname": "src/index.js~lineItem#_name",
    "access": "private",
    "description": null,
    "lineNumber": 466,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "get",
    "name": "lineWidth",
    "memberof": "src/index.js~lineItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~lineItem#lineWidth",
    "access": "public",
    "description": "Stroke width in pixels",
    "lineNumber": 479,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 101,
    "kind": "get",
    "name": "strokeStyle",
    "memberof": "src/index.js~lineItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~lineItem#strokeStyle",
    "access": "public",
    "description": "Stroke color in hexadecimal as a String",
    "lineNumber": 488,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 102,
    "kind": "get",
    "name": "textStyle",
    "memberof": "src/index.js~lineItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~lineItem#textStyle",
    "access": "public",
    "description": "Text color in hexadecimal as a String",
    "lineNumber": 497,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 103,
    "kind": "get",
    "name": "eventStyle",
    "memberof": "src/index.js~lineItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~lineItem#eventStyle",
    "access": "public",
    "description": "",
    "lineNumber": 506,
    "todo": [
      "figure out what this does"
    ],
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 104,
    "kind": "get",
    "name": "title",
    "memberof": "src/index.js~lineItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~lineItem#title",
    "access": "public",
    "description": "Text corresponding to current line price",
    "lineNumber": 515,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 105,
    "kind": "get",
    "name": "format",
    "memberof": "src/index.js~lineItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~lineItem#format",
    "access": "public",
    "description": "",
    "lineNumber": 524,
    "todo": [
      "figure out what this does"
    ],
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 106,
    "kind": "class",
    "name": "cubeItem",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~cubeItem",
    "access": "public",
    "export": false,
    "importPath": "evntscript/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 529,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 107,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/index.js~cubeItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~cubeItem#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 530,
    "undocument": true
  },
  {
    "__docId__": 108,
    "kind": "member",
    "name": "fCalcEnum",
    "memberof": "src/index.js~cubeItem",
    "static": false,
    "longname": "src/index.js~cubeItem#fCalcEnum",
    "access": "public",
    "description": null,
    "lineNumber": 532,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "member",
    "name": "fCubeMaps",
    "memberof": "src/index.js~cubeItem",
    "static": false,
    "longname": "src/index.js~cubeItem#fCubeMaps",
    "access": "public",
    "description": null,
    "lineNumber": 533,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "set",
    "name": "lineWidth",
    "memberof": "src/index.js~cubeItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~cubeItem#lineWidth",
    "access": "public",
    "description": "Stroke width in pixels",
    "lineNumber": 545,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 111,
    "kind": "member",
    "name": "_lineWidth",
    "memberof": "src/index.js~cubeItem",
    "static": false,
    "longname": "src/index.js~cubeItem#_lineWidth",
    "access": "private",
    "description": null,
    "lineNumber": 547,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "set",
    "name": "strokeStyle",
    "memberof": "src/index.js~cubeItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~cubeItem#strokeStyle",
    "access": "public",
    "description": "Stroke color in hexadecimal as a String",
    "lineNumber": 560,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 113,
    "kind": "member",
    "name": "_strokeStyle",
    "memberof": "src/index.js~cubeItem",
    "static": false,
    "longname": "src/index.js~cubeItem#_strokeStyle",
    "access": "private",
    "description": null,
    "lineNumber": 562,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "set",
    "name": "format",
    "memberof": "src/index.js~cubeItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~cubeItem#format",
    "access": "public",
    "description": "",
    "lineNumber": 575,
    "todo": [
      "figure out what this does"
    ],
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 115,
    "kind": "member",
    "name": "_format",
    "memberof": "src/index.js~cubeItem",
    "static": false,
    "longname": "src/index.js~cubeItem#_format",
    "access": "private",
    "description": null,
    "lineNumber": 577,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "set",
    "name": "textStyle",
    "memberof": "src/index.js~cubeItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~cubeItem#textStyle",
    "access": "public",
    "description": "Text color in hexadecimal as a String",
    "lineNumber": 590,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 117,
    "kind": "member",
    "name": "_textStyle",
    "memberof": "src/index.js~cubeItem",
    "static": false,
    "longname": "src/index.js~cubeItem#_textStyle",
    "access": "private",
    "description": null,
    "lineNumber": 592,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "set",
    "name": "bodyStyle",
    "memberof": "src/index.js~cubeItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~cubeItem#bodyStyle",
    "access": "public",
    "description": "",
    "lineNumber": 605,
    "todo": [
      "figure out what this does"
    ],
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "_bodyStyle",
    "memberof": "src/index.js~cubeItem",
    "static": false,
    "longname": "src/index.js~cubeItem#_bodyStyle",
    "access": "private",
    "description": null,
    "lineNumber": 607,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "set",
    "name": "title",
    "memberof": "src/index.js~cubeItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~cubeItem#title",
    "access": "public",
    "description": "Text corresponding to current cube price",
    "lineNumber": 620,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "_title",
    "memberof": "src/index.js~cubeItem",
    "static": false,
    "longname": "src/index.js~cubeItem#_title",
    "access": "private",
    "description": null,
    "lineNumber": 622,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "set",
    "name": "name",
    "memberof": "src/index.js~cubeItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~cubeItem#name",
    "access": "public",
    "description": "",
    "lineNumber": 635,
    "todo": [
      "figure out what this does"
    ],
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 123,
    "kind": "member",
    "name": "_name",
    "memberof": "src/index.js~cubeItem",
    "static": false,
    "longname": "src/index.js~cubeItem#_name",
    "access": "private",
    "description": null,
    "lineNumber": 637,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "get",
    "name": "lineWidth",
    "memberof": "src/index.js~cubeItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~cubeItem#lineWidth",
    "access": "public",
    "description": "Stroke width in pixels",
    "lineNumber": 650,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 125,
    "kind": "get",
    "name": "strokeStyle",
    "memberof": "src/index.js~cubeItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~cubeItem#strokeStyle",
    "access": "public",
    "description": "Stroke color in hexadecimal as a String",
    "lineNumber": 659,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 126,
    "kind": "get",
    "name": "textStyle",
    "memberof": "src/index.js~cubeItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~cubeItem#textStyle",
    "access": "public",
    "description": "Text color in hexadecimal as a String",
    "lineNumber": 668,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 127,
    "kind": "get",
    "name": "eventStyle",
    "memberof": "src/index.js~cubeItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~cubeItem#eventStyle",
    "access": "public",
    "description": "",
    "lineNumber": 677,
    "todo": [
      "figure out what this does"
    ],
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 128,
    "kind": "get",
    "name": "title",
    "memberof": "src/index.js~cubeItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~cubeItem#title",
    "access": "public",
    "description": "Text corresponding to current cube price",
    "lineNumber": 686,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 129,
    "kind": "get",
    "name": "format",
    "memberof": "src/index.js~cubeItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~cubeItem#format",
    "access": "public",
    "description": "",
    "lineNumber": 695,
    "todo": [
      "figure out what this does"
    ],
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 130,
    "kind": "function",
    "name": "eventToJson",
    "memberof": "src/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~eventToJson",
    "access": "public",
    "export": false,
    "importPath": "evntscript/src/index.js",
    "importStyle": null,
    "description": "Returns a JSON object representing the provided event",
    "lineNumber": 704,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "pEvent",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "function",
    "name": "eventCopy",
    "memberof": "src/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~eventCopy",
    "access": "public",
    "export": false,
    "importPath": "evntscript/src/index.js",
    "importStyle": null,
    "description": "Returns a copy of a provided event",
    "lineNumber": 732,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "pEvent",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "class",
    "name": "feed",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~feed",
    "access": "public",
    "export": false,
    "importPath": "evntscript/src/index.js",
    "importStyle": null,
    "description": "This class' functions should be overridden in each script for handling user actions and symbol events",
    "examples": [
      "class MyFeed extends v9.feed\t{\n\tonOpen ()\n\t{\n\t}\n\n\tonLoad ()\n\t{\n\t}\n\n\tonStop ()\n\t{\n\t}\n\n\tonRender ()\n\t{\n\t}\n\n\tonEvent (pSymbol,pEvent,pRealTime)\n\t{\n\t}\n}\n\nlet feed = new MyFeed(new v9.edit().symbol);"
    ],
    "lineNumber": 826,
    "interface": false
  },
  {
    "__docId__": 133,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/index.js~feed",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~feed#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 831,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "pSymbol",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "onOpen",
    "memberof": "src/index.js~feed",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~feed#onOpen",
    "access": "public",
    "description": "Built in feed function that is called when the start button is pressed in order to initialize variables.",
    "examples": [
      "onOpen(pMeta) {\n\n}"
    ],
    "lineNumber": 845,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pMeta",
        "description": "Object representing json meta information. It currently provides the instrument definitions of the supplied symbol."
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "onLoad",
    "memberof": "src/index.js~feed",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~feed#onLoad",
    "access": "public",
    "description": "Built in feed function that is called once the script has read every previous event in the symbol Feed.",
    "examples": [
      "onLoad() {\n\n}"
    ],
    "lineNumber": 857,
    "abstract": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "onEvent",
    "memberof": "src/index.js~feed",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~feed#onEvent",
    "access": "public",
    "description": "The built in onEvent function is called once for each timestamp tracked in your symbol.\n\nThis is where you'll be doing most of your calculations on the specific things you're looking for in your symbol. It allows your script to perform different tasks depending on the current event's conditions.",
    "examples": [
      "onEvent(pSymbol, pEvent, pRealTime) {\n\n}"
    ],
    "lineNumber": 873,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "pSymbol",
        "description": "Name of the current symbol"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pEvent",
        "description": "Current event being handled"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "pRealTime",
        "description": "Boolean determining whether or not to only handle current events"
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "onRender",
    "memberof": "src/index.js~feed",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~feed#onRender",
    "access": "public",
    "description": "Built in feed function that is called once for each frame that is rendered to the viewport.",
    "examples": [
      "onRender() {\n\n}"
    ],
    "lineNumber": 884,
    "abstract": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "onStop",
    "memberof": "src/index.js~feed",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~feed#onStop",
    "access": "public",
    "description": "Built in feed function that is called when the stop button is pressed.",
    "examples": [
      "onStop() {\n\n}"
    ],
    "lineNumber": 895,
    "abstract": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 139,
    "kind": "function",
    "name": "onerror",
    "memberof": "src/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~onerror",
    "access": "public",
    "export": false,
    "importPath": "evntscript/src/index.js",
    "importStyle": null,
    "description": "Reports errors to the debugging window",
    "lineNumber": 907,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "lineNo",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "columnNo",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 140,
    "kind": "function",
    "name": "onfocus",
    "memberof": "src/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~onfocus",
    "access": "public",
    "export": false,
    "importPath": "evntscript/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 932,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "kind": "index",
    "content": "# Vertex Analytics Documentation\n\nVertex Analytics' v9 JavaScript API\n\n# License\n\n\"You're under no obligation to choose a license. However, without a license, the default copyright laws apply, meaning that you retain all rights to your source code and no one may reproduce, distribute, or create derivative works from your work.\" ([GitHub Help](\"https://help.github.com/en/github/creating-cloning-and-archiving-repositories/licensing-a-repository\"))\n\nDocumentation Library Used: [ESDoc](\"https://esdoc.org/manual/usage.html\")\n\n# Authors\n- Blake Boris\n- David Salvador\n- William Leiby\n",
    "longname": "/mnt/c/Users/Blake Reset/source/repos/PlGGS/docs/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"evntscript\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Documentation for Vertex Analytics' v9 Javascript API\",\n  \"author\": \"PlGGS\",\n  \"homepage\": \"https://docs.vertex-analytics.com\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/vertex-analytics/docs\"\n  },\n  \"dependencies\": {\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-integrate-manual-plugin\": \"^1.0.0\",\n    \"esdoc-publish-html-plugin\": \"^1.1.2\",\n    \"esdoc-standard-plugin\": \"^1.0.0\"\n  },\n  \"devDependencies\": {\n    \"esdoc-brand-plugin\": \"^1.0.1\",\n    \"esdoc-custom-theme\": \"^1.4.2\",\n    \"esdoc-inject-style-plugin\": \"^1.0.0\"\n  }\n}\n",
    "longname": "/mnt/c/Users/Blake Reset/source/repos/PlGGS/docs/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": true,
    "content": "<img src=\"manual/asset/vertex-logo.png\" alt=\"logo\" width=\"160\"/>\n# Vertex Analytics | v9 API\n\nv9 is a Javascript-based parser that allows for easy \nunderstanding, calculating, and tracking of futures symbols in more \nthan just real-time using vNine at [v9.vertex-analytics.com](https://v9.vertex-analytics.com).\n\nContact: [support@vertex-analytics.com](mailto:support@vertex-analytics.com)\n\n###### Documentation by [Blake Boris](https://blakeboris.com), [William Leiby](williamleiby.com), and David Salvador\n",
    "longname": "/mnt/c/Users/Blake Reset/source/repos/PlGGS/docs/src/index.md",
    "name": "./src/index.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualAsset",
    "longname": "/mnt/c/Users/Blake Reset/source/repos/PlGGS/docs/src/manual/asset",
    "name": "./src/manual/asset",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/mnt/c/Users/Blake Reset/source/repos/PlGGS/docs/src/manual/manual.md",
    "name": "./src/manual/manual.md",
    "content": "# API Manual\n\nv9 is an analytical product for tracking past and current futures contracts. It allows you to programmatically perform actions based on \nincoming CME WebSocket event data with nanosecond precision.\n\n## Accessing v9\n\nThe latest build of v9 can always be accessed at [v9.vertex-analytics.com](https://v9.vertex-analytics.com). \n\n## v9 Editor\n\nThe v9 Editor is where programmers can write custom Javascript-based scripts to build out individual data visualization solutions.\n\nEach script, located on the lefthand side, corresponds to a data visualization solution located on the righthand side.\n\n### Sections\n\n#### Explorer\n\n- Top buttons\n- Your scripts\n- Templates\n- Divided up by libraries\n\n#### Text Editor\n\nThis section is used to edit HTML files that contain data visualization logic for a specified symbol.\n\n#### Debug\n\nThis section logs syntax and runtime errors within your script(s). This does not include errors within external libraries \n\n#### Pane\n\nThis sections presents the data visualizations for a script.\n\n#### HTML File Sections\n\n#### Library Importations\n\nThis section refers to the top of the HTML file where both v9's propritary library and third-party libraries\n\n#### JavaScript Section\n\nClass Architecture\n\nThis section refers to all of the data visualization logic that is executed within v9's runtime.\n\n#### CSS Section\n\nThis section refers to styling overrides one makes within their script(s).\n\n## v9 Dashboard\n\nv9's Dashboards are composed of either one or multiple scripts written in the v9 Editor, and they can easily be exported and shared with other users. \n\nv9 Dashboards are where traders/portfolio managers monitor contracts using the charts built out in the v9 Editor section.\n\n### Dashboard Sections\n\n#### Explorer Section\n\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/mnt/c/Users/Blake Reset/source/repos/PlGGS/docs/src/manual/tutorial1.md",
    "name": "./src/manual/tutorial1.md",
    "content": "# Prices | Beginner\n\nThis sample prepares you to track [Event](../class/src/index.js~Event.html) values and \ntest for the highest and lowest prices.\n\n## Declaring your variables\n\nOnce you've opened your Javascript editor, you should see your default CEVNTPane and CEVNTFeed \nvariables along with some new ones. These are most commonly defined as gEvntPane and gPaneFeed.  \n\n```js\nvar gEvntPane;\nvar gPaneFeed;\nvar gFeedDraw;\nvar kSymbolName = \"\";\n\nvar gCalcTop, gCalcBot;\nvar gStatTop, gStatBot;\nvar gDrawTop, gDrawBot;\n\nvar gOnFirstEvent = true; //tracks whether or not our initial value has been set\nvar gTopPrice = 0.0; //tracks the top price value\nvar gBotPrice = 0.0; //tracks the bottom price value\n```\n\n- [CEvntCalc](../class/src/index.js~CEvntCalc.html) ```gCalcTop, gCalcBot```  \nMake sure to create two variables to save your top and bottom-most prices.\n\n- [CEvntStat](../class/src/index.js~CEvntStat.html) ```gStatTop, gStatBot```  \nYou'll also need to create two variables to display your top and bottom-most prices in your pane.\n\n- [CEVNTDraw](../class/src/index.js~CEvntDraw.html) ```gDrawTop, gDrawBot```  \nFinally, you'll need to create two variables to draw lines corresponding to your top and \nbottom-most prices.\n\n- [Boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) ```gOnFirstEvent```  \nSince we'll be starting each symbol time period at an undetermined price, we'll need the first \nprice as a starting point to base the rest of our conditional statements on.\n\n- [Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) ```gTopPrice, gBotPrice```  \nFinally, we'll need two simple variables to hold the number value corresponding to the highest \nand lowest prices of the period.\n\n## Initialization\n\nNext, you'll need to initialize your variables. In a way, this step is very similar to the \n[onLoad](manual.html#onload) section of the manual's introduction to the built in [onLoad](../function/index.html#static-function-onLoad) \nfunction, but this time, you're going to need to prepare, or *initialize*, a few more variables.\n\n### Your Pane\n\nWhen initializing your [Pane](../class/src/index.js~CEvntPane.html), there are two additional \nfields that allow yout to apply attributes to it. \n\n```js\ngEvntPane = MakePane();\n\ngEvntPane.title = \"Top & Bottom Prices\"; //text at the top of pane\ngEvntPane.fillStyle = \"#030308\"; //background color in hexidecimal as a String\n```\n\n- [title](../class/src/index.js~CEvntPane.html#instance-member-title) ```gEvntPane.fillStyle```  \nThe title is a simple [String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \nthat you can make use of to easily identify this pane from the others on your dashboard.\n\n- [fillStyle](../class/src/index.js~CEvntPane.html#instance-member-fillStyle) ```gEvntPane.fillStyle```  \nThe fill style fills the background of your [Pane](../class/src/index.js~CEvntPane.html) with any \ncolor of your choosing. Just make sure that you format your value as a hexidecimal color with a # \nin a string like: ```\"#000000\"```\n\n### Your Feed\n\nJust like in the manual's [onLoad](manual.html#onLoad) section, you'll need to make sure your \n[Feed](../class/src/index.js~CEvntFeed.html) is properly initialized in order to see your \nsymbol's events.\n\n```js\ngPaneFeed = gEvntPane.MakeFeed(kSymbolName);\ngFeedDraw = gEvntPane.MakeDraw(gPaneFeed);\n```\n\n[//]: # \"Ask about reintroducing these two methods or just referring back to the manual again\"\n\n### Top price\n\nNow that you've created your [Calc](../class/src/index.js~CEvntCalc.html), \n[Stat](../class/src/index.js~CEvntStat.html), and [Draw ](../class/src/index.js~CEvntDraw.html) \nvariables to track and draw your top and bottom prices, it's time to give them a purpose.\n\n#### MakeCalc\n\nThe first of your variables is the easiest to initialize, because it doesn't have any optional \nattributes. More importantly, it's also the easiest to understand. The \n[MakeCalc](../class/src/index.js~CEvntFeed.html#instance-method-MakeCalc) function returns a \nnew [Calc](../class/src/index.js~CEvntCalc.html) object, and we can make use of that by \nsetting our ```gCalcTop``` variable equal to the function.\n\n```js\ngCalcTop = gPaneFeed.MakeCalc();\n```\n\n- [MakeCalc](class/src/index.js~CEvntFeed.html#instance-method-MakeCalc) ```gPaneFeed.MakeCalc()```  \nCreates a [Calc](../class/src/index.js~CEvntCalc.html) object that is able to store calculated \nvalues.\n\n#### MakeDraw\n\nWhile not integral to tracking [Event](../class/src/index.js~Event.html) values in your symbol, \ndrawing a line representing the value you're tracking can be helpful for a number of different \nreasons. Before you're sure your value tracking is working properly, \n[Draw](../class/src/index.js~CEvntDraw.html) objects are extremely useful for troubleshooting, \nand after everything's working, they make it easy to track how the value you're tracking has \nbeen changing over time.\n\n```js\ngDrawTop = gEvntPane.MakeDraw(gCalcTop);\n\ngDrawTop.lineWidth = 3.0;\ngDrawTop.strokeStyle = \"#f4f427\";\n```\n\n- [MakeDraw](../class/src/index.js~CEvntPane.html#instance-method-MakeDraw) ```gEvntPane.MakeDraw(gCalcTop)```  \nCreates a new [Draw](../class/src/index.js~CEvntDraw.html) object that renders lines on your \n[Pane](../class/src/index.js~CEvntPane.html) to represent the state of the values you're \ntracking with the [Calc](../class/src/index.js~CEvntCalc.html) object you pass into it.\n\n- [lineWidth](../class/src/index.js~CEvntDraw.html#instance-member-lineWidth) ```gDrawTop.lineWidth```  \nThe line width is a [Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) \nthat represents the width of the line in pixels.\n\n- [strokeStyle](../class/src/index.js~CEvntDraw.html#instance-member-strokeStyle) ```gDrawTop.strokeStyle```  \nThe stroke style fills the line representing the values you're tracking with any color of your \nchoosing. Just make sure that you format your value as a hexidecimal color with a # in a \nstring like: ```\"#000000\"```\n\n#### MakeStat\n\nThe last variable you need to initialize in order to track your top price is your [Stat](../class/src/index.js~CEvntFeed.html) \nvariable. This variable is used to display the status of whatever it is that you're tracking \nin a box that appears in the top left of your [pane](class/src/index.js~CEvntPane.html).\n\n```js\ngStatTop = gEvntPane.MakeStat(gCalcTop);\n\ngStatTop.title = \"Top Price\";\ngStatTop.fillStyle = \"#f4f427\";\n```\n\n- [MakeStat](../class/src/index.js~CEvntPane.html#instance-method-MakeStat) ```gEvntPane.MakeStat(gCalcTop)```  \nCreates a [Stat](../class/src/index.js~CEvntStat.html) object that is used to display any value \nprovided by the [Calc](../class/src/index.js~CEvntCalc.html) object that you pass into it in the \ntop left corner of your [Pane](../class/src/index.js~CEvntPane.html).\n\n- [title](../class/src/index.js~CEvntStat.html#instance-member-title) ```gDrawTop.lineWidth```  \nThe title represents the text that will be displayed before the value your [Stat](../class/src/index.js~CEvntStat.html) \nis tracking.\n\n- [fillStyle](../class/src/index.js~CEvntStat.html#instance-member-fillStyle) ```gDrawTop.strokeStyle```  \nThe fill style fills the background of your [Stat](../class/src/index.js~CEvntStat.html) with any \ncolor of your choosing. Just make sure that you format your value as a hexidecimal color with a # \nin a string like: ```\"#000000\"```\n\n### Bottom price\n\nIn order to track the lowest price of your symbol period in the same way as the highest, you'll \nalso need to initialize your three bottom price tracking variables.\n\n#### MakeCalc\n\nAgain, the \n[MakeCalc](../class/src/index.js~CEvntFeed.html#instance-method-MakeCalc) function is used to return a \nnew [Calc](../class/src/index.js~CEvntCalc.html) object to our ```gCalcTop``` variable equal \nto the function.\n\n```js\ngCalcBot = gPaneFeed.MakeCalc();\n```\n\n- [MakeCalc](class/src/index.js~CEvntFeed.html#instance-method-MakeCalc) ```gPaneFeed.MakeCalc()```  \nCreates a [Calc](../class/src/index.js~CEvntCalc.html) object that is able to store calculated \nvalues.\n\n#### MakeDraw\n\nThen, you can initialize \n\nWhile not integral to tracking [Event](../class/src/index.js~Event.html) values in your symbol, \ndrawing a line representing the value you're tracking can be helpful for a number of different \nreasons. Before you're sure your value tracking is working properly, [Draw](../class/src/index.js~CEvntDraw.html) \nobjects are extremely useful for troubleshooting, and after everything's working, they make it \neasy to track how the value you're tracking has been changing over time.\n\n```js\ngDrawTop = gEvntPane.MakeDraw(gCalcTop);\n\ngDrawTop.lineWidth = 3.0;\ngDrawTop.strokeStyle = \"#f4f427\";\n```\n\n- [MakeDraw](../class/src/index.js~CEvntPane.html#instance-method-MakeDraw) ```gEvntPane.MakeDraw(gCalcTop)```  \nCreates a new [Draw](../class/src/index.js~CEvntDraw.html) object that renders lines on your \n[Pane](../class/src/index.js~CEvntPane.html) to represent the state of the values you're \ntracking with the [Calc](../class/src/index.js~CEvntCalc.html) object you pass into it.\n\n- [lineWidth](../class/src/index.js~CEvntDraw.html#instance-member-lineWidth) ```gDrawTop.lineWidth```  \nThe line width is a [Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) \nthat represents the width of the line in pixels.\n\n- [strokeStyle](../class/src/index.js~CEvntDraw.html#instance-member-strokeStyle) ```gDrawTop.strokeStyle```  \nThe stroke style fills the line representing the values you're tracking with any color of your \nchoosing. Just make sure that you format your value as a hexidecimal color with a # in a \nstring like: ```\"#000000\"```\n\n#### MakeStat\n\nThe last variable you need to initialize in order to track your top price is your [Stat](../class/src/index.js~CEvntFeed.html) \nvariable. This variable is used to display the status of whatever it is that you're tracking \nin a box that appears in the top left of your [pane](class/src/index.js~CEvntPane.html).\n\n```js\ngStatTop = gEvntPane.MakeStat(gCalcTop);\n\ngStatTop.title = \"Top Price\";\ngStatTop.fillStyle = \"#f4f427\";\n```\n\n- [MakeStat](../class/src/index.js~CEvntPane.html#instance-method-MakeStat) ```gEvntPane.MakeStat(gCalcTop)```  \nCreates a [Stat](../class/src/index.js~CEvntStat.html) object that is used to display any value \nprovided by the [Calc](../class/src/index.js~CEvntCalc.html) object that you pass into it in the \ntop left corner of your [Pane](../class/src/index.js~CEvntPane.html).\n\n- [title](../class/src/index.js~CEvntStat.html#instance-member-title) ```gDrawTop.lineWidth```  \nThe title represents the text that will be displayed before the value your [Stat](../class/src/index.js~CEvntStat.html) \nis tracking.\n\n- [fillStyle](../class/src/index.js~CEvntStat.html#instance-member-fillStyle) ```gDrawTop.strokeStyle```  \nThe fill style fills the background of your [Stat](../class/src/index.js~CEvntStat.html) with any \ncolor of your choosing. Just make sure that you format your value as a hexidecimal color with a # \nin a string like: ```\"#000000\"```\n\n### Complete intialization\n\nOnce you've prepared everything above, your onLoad function should accomplish the same thing \nas the one below. You will probably have arranged your code differently, but as long as \neverything is initialized, you're ready to begin working on your \n[onEvent](../function/index.html#static-function-onEvent) function.\n\n```js\nfunction onLoad()\n{\n    //------------------------------------------------\\\n    gEvntPane = MakePane();\n\n    gEvntPane.title = \"Daily Top & Bottom | ESM9 Sample\";\n    gEvntPane.fillStyle = \"#030308\";\n    //------------------------------------------------/\n\n    //------------------------------------------------\\\n    gPaneFeed = gEvntPane.MakeFeed(kSymbolName);\n    gFeedDraw = gEvntPane.MakeDraw(gPaneFeed);\n\n    gCalcTop = gPaneFeed.MakeCalc();\n    gCalcBot = gPaneFeed.MakeCalc();\n    //------------------------------------------------/\n\n    //------------------------------------------------\\\n    gDrawTop = gEvntPane.MakeDraw(gCalcTop);\n\n    gDrawTop.lineWidth = 3.0;\n    gDrawTop.strokeStyle = \"#f4f427\";\n\n    gDrawBot = gEvntPane.MakeDraw(gCalcBot);\n\n    gDrawBot.lineWidth = 3.0;\n    gDrawBot.strokeStyle = \"#ff1c58\";\n    //------------------------------------------------/\n\n    //------------------------------------------------\\\n    gStatTop = gEvntPane.MakeStat(gCalcTop);\n\n    gStatTop.title = \"Top Price\";\n    gStatTop.fillStyle = \"#f4f427\";\n\n    gStatBot = gEvntPane.MakeStat(gCalcBot);\n\n    gStatBot.title = \"Bot Price\";\n    gStatBot.fillStyle = \"#ff1c58\";\n    //------------------------------------------------/\n}\n```\n\n## Event handling\n\nNow, it's time to start working on your [onEvent](../function/index.html#static-function-onEvent) \nfunction. If you want a refresher on the purpose of the [onEvent](../function/index.html#static-function-onEvent) \nfunction, head over to the [manual](manual.html) and catch up on the [onEvent](manual.html#onevent) \nsection.\n\n### Reading your Feed\n\nWhenever you're dealing with events in your [onEvent](../function/index.html#static-function-onEvent) \nmethod, you're going to need to make use of your [Feed](class/src/index.js~CEvntFeed.html)'s \n[FeedRead](../class/src/index.js~CEvntFeed.html#instance-method-FeedRead) method to get \ninformation about each [Event](../class/src/index.js~Event.html) your function handles.\n\nBelow, you can see an easy way to capture this [Event](../class/src/index.js~Event.html). You can \ncreate a new variable to store the current [Event](../class/src/index.js~Event.html) being read \nin from your [Feed](class/src/index.js~CEvntFeed.html). We'll continue to refer to this event as \ntTick, but you can call it whatever is most memorable for you.\n\n```js\nvar tTick = pFeed.FeedRead(pSequ);\n```\n\n- [FeedRead](../class/src/index.js~CEvntFeed.html#instance-method-FeedRead) ```pFeed.FeedRead(pSequ)```  \nEach event has a sequence value for indexing its position among all of the other [Events](../class/src/index.js~Event.html). \nUsing this sequence value, ```pSequ```, [FeedRead](../class/src/index.js~CEvntFeed.html#instance-method-FeedRead) \nreturns the [Event](../class/src/index.js~Event.html) at that spot in your symbol's [Feed](class/src/index.js~CEvntFeed.html).\n\n### Your first Event\n\nThis will **not** be the case in every sample you right, as you will certainly be tracking more \nthan just prices, but for this example, our first [Event](../class/src/index.js~Event.html) is a \nspecial case. \n\nIf you don't take the time to designate the first [Event](../class/src/index.js~Event.html) \nas a special case, your ```gTopPrice``` and ```gBotPrice``` variables will still be set to \ntheir default to a value of zero, and that means your ```gBotPrice``` variable will most \nlikely never be tracked properly.\n\nTo check for whether or not your script has just come across the first [Event](../class/src/index.js~Event.html), \nyou need to use an [if...else statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else). \nIf statements allow you to execute different lines of code depending on whether or not a \ncondition you set ends up being true or false.\n\nNow, in order to designate your first [Event](../class/src/index.js~Event.html) as a special \ncase, use an [if...else statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else) \nwith your ```gOnFirstEvent``` variable you created earlier to create a condition.\n\n```js\nif (gOnFirstEvent == true)\n{\n    gTopPrice = tTick.Trade.Price;\n    gBotPrice = tTick.Trade.Price;\n    gOnFirstEvent = false;\n}\n```\n\nThe statement above checks whether or not your condition, gOnFirstEvent, evaluates to true. If \nso, it sets our top and bottom prices to the first price value recorded in your symbol and sets \nyour gOnFirstEvent variable to false, so you don't run the code within this if statement again.\n\nOne thing to note is that the above if statement is logically equivalent to:\n\n```js\nif (gOnFirstEvent)\n```\n\nOmitting the ```== true``` portion of the statement is just shorthand. It works well for \ndescriptive variables like gOnFirstEvent, because it lets the statement almost read like a \nsentence. ```If on first event, do ...```\n\n### Other Events\n\nFor all other events, you're finally going to perform the two major checks to track the top and \nbottom prices of your symbol's period. To accomplish this, you can again make use of an [if...else statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else). \n\n```js\nif (tTick.Trade.Price > gTopPrice)\n{\n    gTopPrice = tTick.Trade.Price;\n}\nelse if (tTick.Trade.Price < gBotPrice)\n{\n    gBotPrice = tTick.Trade.Price;\n}\n```\n\nHere, you're first going to check whether or not the current trade price is greater than your \ntop price variable, and if so, you simply set your top price variable to the current trade price.\n\nOtherwise, you're going to need to make use of the ```else if``` portion of the statement to \nonly perform another check if the last one wasn't true. \n\nSo if the current price wasn't greater than your top price variable, then your first if statement \nwill fail, and you'll need to check whether or not the current trade price is less than your \nbottom price variable, and if so, you just set your bottom price variable to the current trade \nprice instead.\n\n### Saving values\n\nOnce you've checked whether or not the current trade price is of any significance, you'll need to \nsave your top and bottom price values to your [Calc]() objects.\n\nYour [Calc](../class/src/index.js~CEvntStat.html) variables will then relay the prices you saved \nto their corresponding [Stat](../class/src/index.js~CEvntStat.html) variables to display their \nvalues to the top left corner of your symbol [Pane](../class/src/index.js~CEvntPane.html).\n\nThis way, no matter how your [onEvent](../function/index.html#static-function-onEvent) function executes, you make sure to save both your top \nand bottom prices. Yes, you only actually need to save both of them once, but you we were to save \nthem both individually based on the different cases of your function, you would have to repeat \nthese lines a rediculous amount of times. This way, you can make sure that everything gets saved \nevery single time through the function.\n\n```js\ngCalcTop.CalcSave(pSequ, gTopPrice);\ngCalcBot.CalcSave(pSequ, gBotPrice);\n```\n\n- [CalcSave](../class/src/index.js~CEvntCalc.html#instance-method-CalcSave) ```gCalcTop.CalcSave(pSequ, gTopPrice/gBotPrice);```  \nSaves a given value to your [Calc](../class/src/index.js~CEvntStat.html) object in order to display \nit through your [Stat](../class/src/index.js~CEvntStat.html) object to the left of your [Pane](../class/src/index.js~CEvntPane.html).\n\n## Results\n\n#### Congratulations\n\nAt this point, you should now be able to test, save, and display aspects of events, and \nyou should see a chart based off of your selected Symbol for the most recent exchange period like \nthe one shown below! Feel free to zoom in and out and scroll through your newly created chart.\n\nYour script should now provide functionality similar to [this](https://github.com/PlGGS/Vertex-Analytics/blob/master/sample%20scripts/sampleTopBottomPrices.js)\n\n[//]: # \"Add finished script image ![view chart](asset/view_chart.png)\"\n\n#### Troubleshooting\n\nFor certain periods throughout the day, EVNTScript will not be able to generate charts. \nThis is because the vNine platform makes use of the time in which the exchange is down to process and archive data. \nBelow is a chart containing weekly hours of downtime.\n\n| Monday        | Tuesday       | Wednesday     | Thursday      | Friday  | Saturday   | Sunday  |\n|---------------|---------------|---------------|---------------|---------|:----------:|---------|\n| 4:00pm-5:00pm | 4:00pm-5:00pm | 4:00pm-5:00pm | 4:00pm-5:00pm | 4:00pm- | -          | -5:00pm |\n\nAlso, please note that some contracts also stop the exchange from 3:15pm-3:30pm on weekdays.\n\n#### Contact\n\nIf you come across any major issue/bugs, please let us know by sending an email with an explanation of what occured to \n[support@vertex-analytics.com](mailto:support@vertex-analytics.com).\n\nAdditionally, if there is something that you think we could improve about this documentation, \nplease create a new issue at our repository's [issues page](https://github.com/PlGGS/xva-doc/issues).\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/mnt/c/Users/Blake Reset/source/repos/PlGGS/docs/src/manual/tutorial2.md",
    "name": "./src/manual/tutorial2.md",
    "content": "# More Than Prices | Beginner\n\nIn the [Prices](tutorial1.html) commentary, you learned how to track and graph [Event](../class/src/index.js~Event.html) \nvalues on a [Pane](../class/src/index.js~CEvntPane.html). Scripts can track more than just prices \nthough. In some cases, it might be useful to track the [Quantities](https://bblake.info/vxa-doc/class/src/index.js~Trade.html#instance-member-Quantity) \nof [Trades](https://bblake.info/vxa-doc/class/src/index.js~Trade.html). \n\n[//]: # \"Figure out better name for tutorials/commentaries\"\n\nThis sample prepares you to efficiently track and plot values other than prices with a multitude of \nexamples and tips. Although, before doing so, there are some very important things to keep in mind.\n\n## Things to Keep in Mind\n\n### Don't Draw Your Symbol's Feed\n\nMore often than not, drawing your Symbol's [Event](../class/src/index.js~Event.html) [Feed](../class/src/index.js~CEvntFeed.html) \ncan be counterproductive, as it will default the left-hand side of your [Pane](../class/src/index.js~CEvntPane.html) \nto be based on [Prices](../class/src/index.js~Trade.html#instance-member-Price).\n\n### Price Tracking can Blind You\n\n### Timestamps on the Horizontal\n\n## Tracking Other Values\n\n### Event Quantities\n\n### Totals\n\n### Differences\n\n## Results\n\n#### Congratulations\n\n...\n\n#### Troubleshooting\n\nFor certain periods throughout the day, EVNTScript will not be able to generate charts. \nThis is because the vNine platform makes use of the time in which the exchange is down to process and archive data. \nBelow is a chart containing weekly hours of downtime.\n\n| Monday        | Tuesday       | Wednesday     | Thursday      | Friday  | Saturday   | Sunday  |\n|---------------|---------------|---------------|---------------|---------|:----------:|---------|\n| 4:00pm-5:00pm | 4:00pm-5:00pm | 4:00pm-5:00pm | 4:00pm-5:00pm | 4:00pm- | -          | -5:00pm |\n\nAlso, please note that some contracts also stop the exchange from 3:15pm-3:30pm on weekdays.\n\n#### Contact\n\nIf you come across any major issue/bugs, please let us know by sending an email with an explanation of what occured to \n[support@vertex-analytics.com](mailto:support@vertex-analytics.com).\n\nAdditionally, if there is something that you think we could improve about this documentation, \nplease create a new issue at our repository's [issues page](https://github.com/PlGGS/xva-doc/issues).\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/mnt/c/Users/Blake Reset/source/repos/PlGGS/docs/src/manual/tutorial3.md",
    "name": "./src/manual/tutorial3.md",
    "content": "# Visual Customization | Beginner\n\nThis sample prepares you to fully personalize your dashboard with all of the customization \nfeatures vNine offers. \n\n## Object Attributes\n\n[//]: # \"Write detailed explanationss for object attributes\"\n\n### [Pane](../class/src/index.js~CEvntPane.html)\n\n- title\n- fillStyle\n\n### [Stat](../class/src/index.js~CEvntStat.html)\n\n- title\n- textStyle\n\n### [Draw](../class/src/index.js~CEvntDraw.html)\n\n- lineWidth\n- strokeStyle\n\n### [Trig](../class/src/index.js~CEvntTrig.html)\n\n- title\n- textStyle\n- duration\n\n### [Fill](../class/src/index.js~CEvntFill.html)\n\n- fillStyle\n- textStyle\n\n## Results\n\n#### Congratulations\n\n...\n\n#### Troubleshooting\n\nFor certain periods throughout the day, EVNTScript will not be able to generate charts. \nThis is because the vNine platform makes use of the time in which the exchange is down to process and archive data. \nBelow is a chart containing weekly hours of downtime.\n\n| Monday        | Tuesday       | Wednesday     | Thursday      | Friday  | Saturday   | Sunday  |\n|---------------|---------------|---------------|---------------|---------|:----------:|---------|\n| 4:00pm-5:00pm | 4:00pm-5:00pm | 4:00pm-5:00pm | 4:00pm-5:00pm | 4:00pm- | -          | -5:00pm |\n\nAlso, please note that some contracts also stop the exchange from 3:15pm-3:30pm on weekdays.\n\n#### Contact\n\nIf you come across any major issue/bugs, please let us know by sending an email with an explanation of what occured to \n[support@vertex-analytics.com](mailto:support@vertex-analytics.com).\n\nAdditionally, if there is something that you think we could improve about this documentation, \nplease create a new issue at our repository's [issues page](https://github.com/PlGGS/xva-doc/issues).\n",
    "static": true,
    "access": "public"
  }
]